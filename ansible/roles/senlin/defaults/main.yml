---
senlin_services:
  senlin-api:
    container_name: senlin_api
    group: senlin-api
    enabled: true
    image: "{{ senlin_api_image_full }}"
    volumes: "{{ senlin_api_default_volumes + senlin_api_extra_volumes }}"
    dimensions: "{{ senlin_api_dimensions }}"
    healthcheck: "{{ senlin_api_healthcheck }}"
    haproxy:
      senlin_api:
        enabled: "{{ enable_senlin }}"
        mode: "http"
        external: false
        port: "{{ senlin_api_port }}"
        listen_port: "{{ senlin_api_listen_port }}"
      senlin_api_external:
        enabled: "{{ enable_senlin }}"
        mode: "http"
        external: true
        port: "{{ senlin_api_port }}"
        listen_port: "{{ senlin_api_listen_port }}"
  senlin-conductor:
    container_name: senlin_conductor
    group: senlin-conductor
    enabled: true
    image: "{{ senlin_conductor_image_full }}"
    volumes: "{{ senlin_conductor_default_volumes + senlin_conductor_extra_volumes }}"
    dimensions: "{{ senlin_conductor_dimensions }}"
    healthcheck: "{{ senlin_conductor_healthcheck }}"
  senlin-engine:
    container_name: senlin_engine
    group: senlin-engine
    enabled: true
    image: "{{ senlin_engine_image_full }}"
    volumes: "{{ senlin_engine_default_volumes + senlin_engine_extra_volumes }}"
    dimensions: "{{ senlin_engine_dimensions }}"
    healthcheck: "{{ senlin_engine_healthcheck }}"
  senlin-health-manager:
    container_name: senlin_health_manager
    group: senlin-health-manager
    enabled: true
    image: "{{ senlin_health_manager_image_full }}"
    volumes: "{{ senlin_health_manager_default_volumes + senlin_health_manager_extra_volumes }}"
    dimensions: "{{ senlin_health_manager_dimensions }}"
    healthcheck: "{{ senlin_health_manager_healthcheck }}"

####################
# Database
####################
senlin_database_name: "senlin"
senlin_database_user: "{% if use_preconfigured_databases | bool and use_common_mariadb_user | bool %}{{ database_user }}{% else %}senlin{% endif %}"
senlin_database_address: "{{ database_address | put_address_in_context('url') }}:{{ database_port }}"

####################
# Database sharding
####################
senlin_database_shard_root_user: "{% if enable_proxysql | bool %}root_shard_{{ senlin_database_shard_id }}{% else %}{{ database_user }}{% endif %}"
senlin_database_shard_id: "{{ mariadb_default_database_shard_id | int }}"
senlin_database_shard:
  users:
    - user: "{{ senlin_database_user }}"
      password: "{{ senlin_database_password }}"
  rules:
    - schema: "{{ senlin_database_name }}"
      shard_id: "{{ senlin_database_shard_id }}"


####################
# Docker
####################
senlin_tag: "{{ openstack_tag }}"

senlin_conductor_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ docker_namespace }}/senlin-conductor"
senlin_conductor_tag: "{{ senlin_tag }}"
senlin_conductor_image_full: "{{ senlin_conductor_image }}:{{ senlin_conductor_tag }}"

senlin_engine_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ docker_namespace }}/senlin-engine"
senlin_engine_tag: "{{ senlin_tag }}"
senlin_engine_image_full: "{{ senlin_engine_image }}:{{ senlin_engine_tag }}"

senlin_health_manager_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ docker_namespace }}/senlin-health-manager"
senlin_health_manager_tag: "{{ senlin_tag }}"
senlin_health_manager_image_full: "{{ senlin_health_manager_image }}:{{ senlin_health_manager_tag }}"

senlin_api_image: "{{ docker_registry ~ '/' if docker_registry else '' }}{{ docker_namespace }}/senlin-api"
senlin_api_tag: "{{ senlin_tag }}"
senlin_api_image_full: "{{ senlin_api_image }}:{{ senlin_api_tag }}"

senlin_api_dimensions: "{{ default_container_dimensions }}"
senlin_conductor_dimensions: "{{ default_container_dimensions }}"
senlin_engine_dimensions: "{{ default_container_dimensions }}"
senlin_health_manager_dimensions: "{{ default_container_dimensions }}"

senlin_api_enable_healthchecks: "{{ enable_container_healthchecks }}"
senlin_api_healthcheck_interval: "{{ default_container_healthcheck_interval }}"
senlin_api_healthcheck_retries: "{{ default_container_healthcheck_retries }}"
senlin_api_healthcheck_start_period: "{{ default_container_healthcheck_start_period }}"
senlin_api_healthcheck_test: ["CMD-SHELL", "healthcheck_curl http://{{ api_interface_address | put_address_in_context('url') }}:{{ senlin_api_listen_port }}"]
senlin_api_healthcheck_timeout: "{{ default_container_healthcheck_timeout }}"
senlin_api_healthcheck:
  interval: "{{ senlin_api_healthcheck_interval }}"
  retries: "{{ senlin_api_healthcheck_retries }}"
  start_period: "{{ senlin_api_healthcheck_start_period }}"
  test: "{% if senlin_api_enable_healthchecks | bool %}{{ senlin_api_healthcheck_test }}{% else %}NONE{% endif %}"
  timeout: "{{ senlin_api_healthcheck_timeout }}"

senlin_conductor_enable_healthchecks: "{{ enable_container_healthchecks }}"
senlin_conductor_healthcheck_interval: "{{ default_container_healthcheck_interval }}"
senlin_conductor_healthcheck_retries: "{{ default_container_healthcheck_retries }}"
senlin_conductor_healthcheck_start_period: "{{ default_container_healthcheck_start_period }}"
senlin_conductor_healthcheck_test: ["CMD-SHELL", "healthcheck_port senlin-conductor {{ om_rpc_port }}"]
senlin_conductor_healthcheck_timeout: "{{ default_container_healthcheck_timeout }}"
senlin_conductor_healthcheck:
  interval: "{{ senlin_conductor_healthcheck_interval }}"
  retries: "{{ senlin_conductor_healthcheck_retries }}"
  start_period: "{{ senlin_conductor_healthcheck_start_period }}"
  test: "{% if senlin_conductor_enable_healthchecks | bool %}{{ senlin_conductor_healthcheck_test }}{% else %}NONE{% endif %}"
  timeout: "{{ senlin_conductor_healthcheck_timeout }}"

senlin_engine_enable_healthchecks: "{{ enable_container_healthchecks }}"
senlin_engine_healthcheck_interval: "{{ default_container_healthcheck_interval }}"
senlin_engine_healthcheck_retries: "{{ default_container_healthcheck_retries }}"
senlin_engine_healthcheck_start_period: "{{ default_container_healthcheck_start_period }}"
senlin_engine_healthcheck_test: ["CMD-SHELL", "healthcheck_port senlin-engine {{ om_rpc_port }}"]
senlin_engine_healthcheck_timeout: "{{ default_container_healthcheck_timeout }}"
senlin_engine_healthcheck:
  interval: "{{ senlin_engine_healthcheck_interval }}"
  retries: "{{ senlin_engine_healthcheck_retries }}"
  start_period: "{{ senlin_engine_healthcheck_start_period }}"
  test: "{% if senlin_engine_enable_healthchecks | bool %}{{ senlin_engine_healthcheck_test }}{% else %}NONE{% endif %}"
  timeout: "{{ senlin_engine_healthcheck_timeout }}"

senlin_health_manager_enable_healthchecks: "{{ enable_container_healthchecks }}"
senlin_health_manager_healthcheck_interval: "{{ default_container_healthcheck_interval }}"
senlin_health_manager_healthcheck_retries: "{{ default_container_healthcheck_retries }}"
senlin_health_manager_healthcheck_start_period: "{{ default_container_healthcheck_start_period }}"
senlin_health_manager_healthcheck_test: ["CMD-SHELL", "healthcheck_port senlin-health-manager {{ om_rpc_port }}"]
senlin_health_manager_healthcheck_timeout: "{{ default_container_healthcheck_timeout }}"
senlin_health_manager_healthcheck:
  interval: "{{ senlin_health_manager_healthcheck_interval }}"
  retries: "{{ senlin_health_manager_healthcheck_retries }}"
  start_period: "{{ senlin_health_manager_healthcheck_start_period }}"
  test: "{% if senlin_health_manager_enable_healthchecks | bool %}{{ senlin_health_manager_healthcheck_test }}{% else %}NONE{% endif %}"
  timeout: "{{ senlin_health_manager_healthcheck_timeout }}"

senlin_api_default_volumes:
  - "{{ node_config_directory }}/senlin-api/:{{ container_config_directory }}/:ro"
  - "/etc/localtime:/etc/localtime:ro"
  - "{{ '/etc/timezone:/etc/timezone:ro' if ansible_facts.os_family == 'Debian' else '' }}"
  - "kolla_logs:/var/log/kolla/"
  - "{{ kolla_dev_repos_directory ~ '/senlin/senlin:/var/lib/kolla/venv/lib/python' ~ distro_python_version ~ '/site-packages/senlin' if senlin_dev_mode | bool else '' }}"
senlin_conductor_default_volumes:
  - "{{ node_config_directory }}/senlin-conductor/:{{ container_config_directory }}/:ro"
  - "/etc/localtime:/etc/localtime:ro"
  - "{{ '/etc/timezone:/etc/timezone:ro' if ansible_facts.os_family == 'Debian' else '' }}"
  - "kolla_logs:/var/log/kolla/"
  - "{{ kolla_dev_repos_directory ~ '/senlin/senlin:/var/lib/kolla/venv/lib/python' ~ distro_python_version ~ '/site-packages/senlin' if senlin_dev_mode | bool else '' }}"
senlin_engine_default_volumes:
  - "{{ node_config_directory }}/senlin-engine/:{{ container_config_directory }}/:ro"
  - "/etc/localtime:/etc/localtime:ro"
  - "{{ '/etc/timezone:/etc/timezone:ro' if ansible_facts.os_family == 'Debian' else '' }}"
  - "kolla_logs:/var/log/kolla/"
  - "{{ kolla_dev_repos_directory ~ '/senlin/senlin:/var/lib/kolla/venv/lib/python' ~ distro_python_version ~ '/site-packages/senlin' if senlin_dev_mode | bool else '' }}"
senlin_health_manager_default_volumes:
  - "{{ node_config_directory }}/senlin-health-manager/:{{ container_config_directory }}/:ro"
  - "/etc/localtime:/etc/localtime:ro"
  - "{{ '/etc/timezone:/etc/timezone:ro' if ansible_facts.os_family == 'Debian' else '' }}"
  - "kolla_logs:/var/log/kolla/"
  - "{{ kolla_dev_repos_directory ~ '/senlin/senlin:/var/lib/kolla/venv/lib/python' ~ distro_python_version ~ '/site-packages/senlin' if senlin_dev_mode | bool else '' }}"

senlin_extra_volumes: "{{ default_extra_volumes }}"
senlin_api_extra_volumes: "{{ senlin_extra_volumes }}"
senlin_conductor_extra_volumes: "{{ senlin_extra_volumes }}"
senlin_engine_extra_volumes: "{{ senlin_extra_volumes }}"
senlin_health_manager_extra_volumes: "{{ senlin_extra_volumes }}"

####################
# OpenStack
####################
senlin_internal_endpoint: "{{ internal_protocol }}://{{ senlin_internal_fqdn | put_address_in_context('url') }}:{{ senlin_api_port }}"
senlin_public_endpoint: "{{ public_protocol }}://{{ senlin_external_fqdn | put_address_in_context('url') }}:{{ senlin_api_port }}"

senlin_logging_debug: "{{ openstack_logging_debug }}"

senlin_keystone_user: "senlin"

openstack_senlin_auth: "{{ openstack_auth }}"

senlin_api_workers: "{{ openstack_service_workers }}"
senlin_conductor_workers: "{{ openstack_service_workers }}"
senlin_engine_workers: "{{ openstack_service_workers }}"
senlin_health_manager_workers: "{{ openstack_service_workers }}"

####################
# Kolla
####################
senlin_git_repository: "{{ kolla_dev_repos_git }}/{{ project_name }}"
senlin_dev_repos_pull: "{{ kolla_dev_repos_pull }}"
senlin_dev_mode: "{{ kolla_dev_mode }}"
senlin_source_version: "{{ kolla_source_version }}"


####################
# Notifications
####################
senlin_notification_topics:
  - name: notifications
    enabled: "{{ enable_ceilometer | bool }}"

senlin_enabled_notification_topics: "{{ senlin_notification_topics | selectattr('enabled', 'equalto', true) | list }}"

####################
# Keystone
####################
senlin_ks_services:
  - name: "senlin"
    type: "clustering"
    description: "Senlin Clustering Service"
    endpoints:
      - {'interface': 'internal', 'url': '{{ senlin_internal_endpoint }}'}
      - {'interface': 'public', 'url': '{{ senlin_public_endpoint }}'}

senlin_ks_users:
  - project: "service"
    user: "{{ senlin_keystone_user }}"
    password: "{{ senlin_keystone_password }}"
    role: "admin"
